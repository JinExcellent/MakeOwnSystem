!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Asm	properties	/properties (req, vararg for parameters)/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!LdScript	assignment	/how a value is assigned to the symbol/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Asm	d,define	/defines/
!_TAG_KIND_DESCRIPTION!Asm	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Asm	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Asm	t,type	/types (structs and records)/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!LdScript	S,section	/sections/
!_TAG_KIND_DESCRIPTION!LdScript	i,inputSection	/input sections/
!_TAG_KIND_DESCRIPTION!LdScript	s,symbol	/symbols/
!_TAG_KIND_DESCRIPTION!LdScript	v,version	/versions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Asm	1.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!LdScript	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jin/MakeOwnOS/day16/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20250302.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	destination	/specified as the destination of code and data/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	discarded	/discarded when linking/
!_TAG_ROLE_DESCRIPTION!LdScript!inputSection	mapped	/mapped to output section/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	aliased	/aliased with __attribute__((alias(...))) in C\/C++ code/
!_TAG_ROLE_DESCRIPTION!LdScript!symbol	entrypoint	/entry points/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
%.bin	makefile	/^%.bin: %.asm$/;"	t
%.bin	makefile	/^%.bin: %.c$/;"	t
%.hrb	makefile	/^%.hrb: %.asm$/;"	t
ADD	IPL.asm	/^  ADD   DH, 1$/;"	d
ADR_BOOTINFO	include/bootpack.h	/^#define ADR_BOOTINFO /;"	d
ADR_BOOTPACK	include/desctbl.h	/^#define ADR_BOOTPACK /;"	d
ADR_DISKIMG	include/bootpack.h	/^#define ADR_DISKIMG /;"	d
ADR_GDT	include/desctbl.h	/^#define ADR_GDT /;"	d
ADR_IDT	include/desctbl.h	/^#define ADR_IDT /;"	d
APPS	makefile	/^APPS := app\/hello.hrb app\/a.hrb$/;"	m
APP_CFLAGS	makefile	/^APP_CFLAGS = -Wall -Wno-format -Wno-unused -std=gnu99 -m32	-fno-pie$/;"	m
APP_LDFLAGS	makefile	/^APP_LDFLAGS = -m elf_i386 --oformat elf32-i386 -e main$/;"	m
AR_CODE32_ER	include/desctbl.h	/^#define AR_CODE32_ER /;"	d
AR_DATA32_RW	include/desctbl.h	/^#define AR_DATA32_RW /;"	d
AR_INTGATE32	include/desctbl.h	/^#define AR_INTGATE32 /;"	d
AR_TSS32	include/desctbl.h	/^#define AR_TSS32 /;"	d
AS	makefile	/^AS := nasm$/;"	m
BOTPAK	OS.asm	/^BOTPAK  EQU   0x00280000  ; 加载bootpack$/;"	d
BootInfo	include/bootpack.h	/^struct BootInfo{$/;"	s
CFLAGS	makefile	/^CFLAGS := -Wall -Wno-format -Wno-unused -std=gnu99 -static -m32  $/;"	m
CMP	IPL.asm	/^  CMP   DH, 2$/;"	d
COL8_000000	include/graphic.h	/^#define COL8_000000 /;"	d
COL8_000084	include/graphic.h	/^#define COL8_000084 /;"	d
COL8_0000FF	include/graphic.h	/^#define COL8_0000FF /;"	d
COL8_008400	include/graphic.h	/^#define COL8_008400 /;"	d
COL8_008484	include/graphic.h	/^#define COL8_008484 /;"	d
COL8_00FF00	include/graphic.h	/^#define COL8_00FF00 /;"	d
COL8_00FFFF	include/graphic.h	/^#define COL8_00FFFF /;"	d
COL8_840000	include/graphic.h	/^#define COL8_840000 /;"	d
COL8_840084	include/graphic.h	/^#define COL8_840084 /;"	d
COL8_848400	include/graphic.h	/^#define COL8_848400 /;"	d
COL8_848484	include/graphic.h	/^#define COL8_848484 /;"	d
COL8_C6C6C6	include/graphic.h	/^#define COL8_C6C6C6 /;"	d
COL8_FF0000	include/graphic.h	/^#define COL8_FF0000 /;"	d
COL8_FF00FF	include/graphic.h	/^#define COL8_FF00FF /;"	d
COL8_FFFF00	include/graphic.h	/^#define COL8_FFFF00 /;"	d
COL8_FFFFFF	include/graphic.h	/^#define COL8_FFFFFF /;"	d
CONSOLE	include/console.h	/^struct CONSOLE{$/;"	s
CR0_CACHE_DISABLE	include/asmfunc.h	/^#define CR0_CACHE_DISABLE /;"	d
CYLS	IPL.asm	/^CYLS   EQU   10               ; 读取的柱面数量（CYLS = cylinders）$/;"	d
CYLS	OS.asm	/^CYLS    EQU   0x0ff0      ; 设置启动区$/;"	d
DSKCAC	OS.asm	/^DSKCAC  EQU   0x00100000  ; 磁盘缓存的位置$/;"	d
DSKCAC0	OS.asm	/^DSKCAC0 EQU   0x00008000  ; 实模式磁盘缓存的位置$/;"	d
EFLAGS_AC_BIT	include/asmfunc.h	/^#define EFLAGS_AC_BIT /;"	d
EXTERN	INThandler.asm	/^EXTERN INT_handler20, INT_handler21, INT_handler27, INT_handler2c,INT_handler0d$/;"	l
EXTERN	asmfunc.asm	/^EXTERN cons_putchar$/;"	l
FIFO32	include/fifo.h	/^struct FIFO32 {$/;"	s
FILEINFO	include/fileinfo.h	/^struct FILEINFO{$/;"	s
FLAGS_OVERRUN	include/fifo.h	/^#define FLAGS_OVERRUN /;"	d
FreeInfo	include/memory.h	/^struct FreeInfo {$/;"	s
GDT0	OS.asm	/^GDT0:$/;"	l
GDTR0	OS.asm	/^GDTR0:$/;"	l
GXX	makefile	/^GXX := gcc $/;"	m
GateDescriptor	include/desctbl.h	/^struct GateDescriptor {$/;"	s
IMG	makefile	/^IMG := haribote.img$/;"	m
INT	app/hello.asm	/^INT 0x40$/;"	l
INT_handler0d	int.c	/^int *INT_handler0d(int *esp){$/;"	f	typeref:typename:int *
INT_handler20	timer.c	/^void INT_handler20(int *esp){$/;"	f	typeref:typename:void
INT_handler21	keyboard.c	/^void INT_handler21(int *esp) {$/;"	f	typeref:typename:void
INT_handler27	int.c	/^void INT_handler27(int *esp) {$/;"	f	typeref:typename:void
INT_handler2c	mouse.c	/^void INT_handler2c(int *esp) {$/;"	f	typeref:typename:void
IPL.bin	makefile	/^IPL.bin:$/;"	t
KBC_MODE	include/keyboard.h	/^#define KBC_MODE /;"	d
KEYCMD_LED	include/keyboard.h	/^#define KEYCMD_LED /;"	d
KEYCMD_SENDTO_MOUSE	include/mouse.h	/^#define KEYCMD_SENDTO_MOUSE /;"	d
KEYCMD_WRITE_MODE	include/keyboard.h	/^#define KEYCMD_WRITE_MODE /;"	d
KEYSTA_SEND_NOTREADY	include/keyboard.h	/^#define KEYSTA_SEND_NOTREADY /;"	d
KEY_FIFO_BUF_SIZE	include/keyboard.h	/^#define KEY_FIFO_BUF_SIZE /;"	d
K_OBJS	makefile	/^K_OBJS := bootpack.bin asmfunc.bin Stab.bin hankaku.bin desctbl.bin graphic.bin int.bin INThandl/;"	m
LD	makefile	/^LD := ld$/;"	m
LEDS	OS.asm	/^LEDS    EQU   0x0ff1$/;"	d
LIMIT_BOOTPACK	include/desctbl.h	/^#define LIMIT_BOOTPACK /;"	d
LIMIT_GDT	include/desctbl.h	/^#define LIMIT_GDT /;"	d
LIMIT_IDT	include/desctbl.h	/^#define LIMIT_IDT /;"	d
L_OBJS	makefile	/^L_OBJS := ..\/libc\/stdio\/stdio.bin ..\/libc\/string\/strcmp.bin ..\/libc\/string\/strncmp.bin /;"	m
MAX_SHEETS	include/sheet.h	/^#define MAX_SHEETS /;"	d
MAX_TASKLEVELS	include/task.h	/^#define MAX_TASKLEVELS /;"	d
MAX_TASKS	include/task.h	/^#define MAX_TASKS /;"	d
MAX_TASKS_LV	include/task.h	/^#define MAX_TASKS_LV /;"	d
MAX_TIMER	include/timer.h	/^#define MAX_TIMER /;"	d
MEMMAN_ADDR	include/memory.h	/^#define MEMMAN_ADDR /;"	d
MEMMAN_FREES	include/memory.h	/^#define MEMMAN_FREES /;"	d
MOUSECMD_ENABLE	include/mouse.h	/^#define MOUSECMD_ENABLE /;"	d
MOUSE_FIFO_BUF_SIZE	include/mouse.h	/^#define MOUSE_FIFO_BUF_SIZE /;"	d
MOV	INThandler.asm	/^    MOV     DS, AX$/;"	d
MOV	INThandler.asm	/^    MOV     DS,AX$/;"	d
MOV	IPL.asm	/^  MOV   DH, 0             ; 磁头0$/;"	d
MOV	IPL.asm	/^  MOV   DH, 0$/;"	d
MOV	IPL.asm	/^  MOV   DL, 0x00          ; A驱动器$/;"	d
MOV	IPL.asm	/^  MOV   DS, AX$/;"	d
MOV	OS.asm	/^  MOV   DI, 0$/;"	d
MOV	OS.asm	/^  MOV   DS, AX$/;"	d
MOV	app/hello.asm	/^MOV EBX, msg   ;这里写入字符串时没有指定段地址，是因为应用程序使用的是/;"	l
MOV	app/hello.asm	/^MOV EDX, 2$/;"	l
MOV	asm_api.asm	/^  MOV     DS, AX$/;"	d
MOV	asmfunc.asm	/^    MOV     DS, BX$/;"	d
MemMan	include/memory.h	/^struct MemMan {$/;"	s
MouseDec	include/mouse.h	/^struct MouseDec{$/;"	s
ORIGIN	kernel.ld	/^  rom : ORIGIN = 0x000000, LENGTH = 0x280000$/;"	s
OS.bin	makefile	/^OS.bin:$/;"	t
OUT	asmfunc.asm	/^    OUT DX,AL$/;"	d
OUT	asmfunc.asm	/^    OUT DX,AX$/;"	d
OUT	asmfunc.asm	/^    OUT DX,EAX$/;"	d
PIC0_ICW1	include/int.h	/^#define PIC0_ICW1 /;"	d
PIC0_ICW2	include/int.h	/^#define PIC0_ICW2 /;"	d
PIC0_ICW3	include/int.h	/^#define PIC0_ICW3 /;"	d
PIC0_ICW4	include/int.h	/^#define PIC0_ICW4 /;"	d
PIC0_IMR	include/int.h	/^#define PIC0_IMR /;"	d
PIC0_OCW2	include/int.h	/^#define PIC0_OCW2 /;"	d
PIC1_ICW1	include/int.h	/^#define PIC1_ICW1 /;"	d
PIC1_ICW2	include/int.h	/^#define PIC1_ICW2 /;"	d
PIC1_ICW3	include/int.h	/^#define PIC1_ICW3 /;"	d
PIC1_ICW4	include/int.h	/^#define PIC1_ICW4 /;"	d
PIC1_IMR	include/int.h	/^#define PIC1_IMR /;"	d
PIC1_OCW2	include/int.h	/^#define PIC1_OCW2 /;"	d
PIT_CNT0	include/timer.h	/^#define PIT_CNT0 /;"	d
PIT_CTRL	include/timer.h	/^#define PIT_CTRL /;"	d
POP	INThandler.asm	/^    POP     DS$/;"	d
POP	asm_api.asm	/^  POP     DS$/;"	d
PORT_KEYCMD	include/keyboard.h	/^#define PORT_KEYCMD /;"	d
PORT_KEYDAT	include/keyboard.h	/^#define PORT_KEYDAT /;"	d
PORT_KEYSTA	include/keyboard.h	/^#define PORT_KEYSTA /;"	d
PUSH	INThandler.asm	/^    PUSH    DS$/;"	d
PUSH	asm_api.asm	/^  PUSH    DS$/;"	d
QEMU	makefile	/^QEMU := qemu-system-i386$/;"	m
QEMU_IMG	makefile	/^QEMU_IMG := $(IMG)$/;"	m
RETF	app/hello.asm	/^RETF$/;"	l
SCRNX	OS.asm	/^SCRNX   EQU   0x0ff4      ; 分辨率X$/;"	d
SCRNY	OS.asm	/^SCRNY   EQU   0x0ff6      ; 分辨率Y$/;"	d
SHEET_USE	include/sheet.h	/^#define SHEET_USE /;"	d
SegmentDescriptor	include/desctbl.h	/^struct SegmentDescriptor {$/;"	s
Sheet	include/sheet.h	/^struct Sheet{$/;"	s
Shtctl	include/sheet.h	/^struct Shtctl{$/;"	s
TASK	include/task.h	/^struct TASK{$/;"	s
TASKCTL	include/task.h	/^struct TASKCTL{$/;"	s
TASKLEVEL	include/task.h	/^struct TASKLEVEL{$/;"	s
TASK_GDT0	include/task.h	/^#define TASK_GDT0 /;"	d
TIMER	include/timer.h	/^struct TIMER{$/;"	s
TIMERCTL	include/timer.h	/^struct TIMERCTL{$/;"	s
TIMER_FLAGS_ALLOC	include/timer.h	/^#define TIMER_FLAGS_ALLOC /;"	d
TIMER_FLAGS_USING	include/timer.h	/^#define TIMER_FLAGS_USING /;"	d
TSS32	include/task.h	/^struct TSS32 {$/;"	s
VBEMODE	OS.asm	/^VBEMODE EQU   0x105$/;"	d
VMODE	OS.asm	/^VMODE   EQU   0x0ff2      ; 关于颜色数目的信息，颜色的位数$/;"	d
VRAM	OS.asm	/^VRAM    EQU   0x0ff8      ; 图像缓冲区的起始位置$/;"	d
_API_H_	include/api.h	/^#define _API_H_$/;"	d
_BOOTPACK_H_	include/bootpack.h	/^#define _BOOTPACK_H_$/;"	d
_CMD_H_	include/cmd.h	/^#define _CMD_H_$/;"	d
_CONSOLE_H_	include/console.h	/^#define _CONSOLE_H_$/;"	d
_DESCTBL_H_	include/desctbl.h	/^#define _DESCTBL_H_$/;"	d
_FIFO_H_	include/fifo.h	/^#define _FIFO_H_$/;"	d
_FILEINFO_H_	include/fileinfo.h	/^#define _FILEINFO_H_$/;"	d
_GRAPHIC_H_	include/graphic.h	/^#define _GRAPHIC_H_$/;"	d
_INT_H_	include/int.h	/^#define _INT_H_$/;"	d
_IO_H_	include/asmfunc.h	/^#define _IO_H_$/;"	d
_KEYBOARD_H_	include/keyboard.h	/^#define _KEYBOARD_H_$/;"	d
_MEMORY_H_	include/memory.h	/^#define _MEMORY_H_$/;"	d
_MOUSE_H_	include/mouse.h	/^#define _MOUSE_H_$/;"	d
_SHEET_H_	include/sheet.h	/^#define _SHEET_H_$/;"	d
_TASK_H_	include/task.h	/^#define _TASK_H_$/;"	d
_TIMER_H_	include/timer.h	/^#define _TIMER_H_$/;"	d
_WINDOW_H_	include/window.h	/^#define _WINDOW_H_$/;"	d
access_right	include/desctbl.h	/^  char base_mid, access_right;$/;"	m	struct:SegmentDescriptor	typeref:typename:char
access_right	include/desctbl.h	/^  char dw_count, access_right;$/;"	m	struct:GateDescriptor	typeref:typename:char
addr	include/memory.h	/^  unsigned int addr, size;$/;"	m	struct:FreeInfo	typeref:typename:unsigned int
all	makefile	/^all: ${L_OBJS} ${OBJS} ${APPS} haribote.sys image$/;"	t
api_end	app/a_asm.asm	/^api_end:$/;"	l
api_putch	app/a_asm.asm	/^api_putch:      ;void api_putch(int c)$/;"	l
app/a.hrb	makefile	/^app\/a.hrb: app\/a_asm.o$/;"	t
app/a_asm.o	makefile	/^app\/a_asm.o:$/;"	t
asm_INT_handler0d	INThandler.asm	/^asm_INT_handler0d:$/;"	l
asm_INT_handler20	INThandler.asm	/^asm_INT_handler20:$/;"	l
asm_INT_handler21	INThandler.asm	/^asm_INT_handler21:$/;"	l
asm_INT_handler27	INThandler.asm	/^asm_INT_handler27:$/;"	l
asm_INT_handler2c	INThandler.asm	/^asm_INT_handler2c:$/;"	l
asm_cons_putchar	asmfunc.asm	/^ asm_cons_putchar:$/;"	l
asm_hrb_api	asm_api.asm	/^asm_hrb_api:$/;"	l
backlink	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
base_high	include/desctbl.h	/^  char limit_high, base_high;$/;"	m	struct:SegmentDescriptor	typeref:typename:char
base_low	include/desctbl.h	/^  short limit_low, base_low;$/;"	m	struct:SegmentDescriptor	typeref:typename:short
base_mid	include/desctbl.h	/^  char base_mid, access_right;$/;"	m	struct:SegmentDescriptor	typeref:typename:char
bootpack	OS.asm	/^bootpack:$/;"	l
box_fill8	graphic.c	/^void box_fill8(unsigned char *vram, int xsize, unsigned char c, int x0, int y0, int x1, int y1) /;"	f	typeref:typename:void
btn	include/mouse.h	/^    int x, y, btn;$/;"	m	struct:MouseDec	typeref:typename:int
buf	include/fifo.h	/^  int *buf;$/;"	m	struct:FIFO32	typeref:typename:int *
buf	include/mouse.h	/^    unsigned char buf[3], phase;$/;"	m	struct:MouseDec	typeref:typename:unsigned char[3]
buf	include/sheet.h	/^    unsigned char *buf;$/;"	m	struct:Sheet	typeref:typename:unsigned char *
bxsize	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
bysize	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
clean	makefile	/^clean:$/;"	t
clustno	include/fileinfo.h	/^    unsigned short time, data, clustno;     \/\/clustno文件所在扇区$/;"	m	struct:FILEINFO	typeref:typename:unsigned short
cmd_app	console.c	/^int cmd_app(struct CONSOLE *cons, int *fat, char *cmdline){$/;"	f	typeref:typename:int
cmd_cls	cmd.c	/^void cmd_cls(struct CONSOLE *cons){$/;"	f	typeref:typename:void
cmd_dir	cmd.c	/^void cmd_dir(struct CONSOLE *cons){$/;"	f	typeref:typename:void
cmd_hlt	cmd.c	/^void cmd_hlt(struct CONSOLE *cons, int *fat){$/;"	f	typeref:typename:void
cmd_mem	cmd.c	/^void cmd_mem(struct CONSOLE *cons, unsigned int memtotal){$/;"	f	typeref:typename:void
cmd_type	cmd.c	/^void cmd_type(struct CONSOLE *cons, int *fat, char *cmdline){$/;"	f	typeref:typename:void
col_inv	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
cons_newline	console.c	/^void cons_newline(struct CONSOLE *cons){$/;"	f	typeref:typename:void
cons_putchar	console.c	/^void cons_putchar(struct CONSOLE *cons, int chr, char move){$/;"	f	typeref:typename:void
cons_putnstr	console.c	/^void cons_putnstr(struct CONSOLE *cons, char *s, int len){$/;"	f	typeref:typename:void
cons_putstr	console.c	/^void cons_putstr(struct CONSOLE *cons, char *s){$/;"	f	typeref:typename:void
cons_runcmd	console.c	/^void cons_runcmd(char *cmdline, struct CONSOLE *cons, int *fat, unsigned int memtotal){$/;"	f	typeref:typename:void
console_task	console.c	/^void console_task(struct Sheet *sheet, unsigned int memtotal){$/;"	f	typeref:typename:void
count	include/timer.h	/^    unsigned int count;$/;"	m	struct:TIMERCTL	typeref:typename:unsigned int
cr3	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
cs	include/task.h	/^  int es, cs, ss, ds, fs, gs;$/;"	m	struct:TSS32	typeref:typename:int
ctl	include/sheet.h	/^    struct Shtctl *ctl;$/;"	m	struct:Sheet	typeref:struct:Shtctl *
cursor_c	include/console.h	/^    int cursor_x, cursor_y, cursor_c;$/;"	m	struct:CONSOLE	typeref:typename:int
cursor_x	include/console.h	/^    int cursor_x, cursor_y, cursor_c;$/;"	m	struct:CONSOLE	typeref:typename:int
cursor_y	include/console.h	/^    int cursor_x, cursor_y, cursor_c;$/;"	m	struct:CONSOLE	typeref:typename:int
cyls	include/bootpack.h	/^  char  cyls;$/;"	m	struct:BootInfo	typeref:typename:char
data	include/fileinfo.h	/^    unsigned short time, data, clustno;     \/\/clustno文件所在扇区$/;"	m	struct:FILEINFO	typeref:typename:unsigned short
data	include/timer.h	/^    unsigned char data;$/;"	m	struct:TIMER	typeref:typename:unsigned char
ds	include/task.h	/^  int es, cs, ss, ds, fs, gs;$/;"	m	struct:TSS32	typeref:typename:int
dw_count	include/desctbl.h	/^  char dw_count, access_right;$/;"	m	struct:GateDescriptor	typeref:typename:char
eax	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
ebp	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
ebx	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
ecx	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
edi	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
edx	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
eflags	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
eip	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
enable_mouse	mouse.c	/^void enable_mouse(struct FIFO32 *fifo, int data0, struct MouseDec *mdec) {$/;"	f	typeref:typename:void
end_app	asm_api.asm	/^.end_app:$/;"	l
entry	IPL.asm	/^entry:$/;"	l
entry	OS.asm	/^entry:$/;"	l
error	IPL.asm	/^error:$/;"	l
es	include/task.h	/^  int es, cs, ss, ds, fs, gs;$/;"	m	struct:TSS32	typeref:typename:int
esi	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
esp	include/task.h	/^  int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;$/;"	m	struct:TSS32	typeref:typename:int
esp0	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
esp1	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
esp2	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
ext	include/fileinfo.h	/^    unsigned char name[8], ext[3], type;    \/\/文件名，文件类型，文件属性$/;"	m	struct:FILEINFO	typeref:typename:unsigned char[3]
far_call	asmfunc.asm	/^ far_call:              ;void far_call(int eip, int cs);$/;"	l
far_jmp	asmfunc.asm	/^ far_jmp:                ;void farjmp(int eip, int cs);$/;"	l
fifo	include/task.h	/^    struct FIFO32 fifo;$/;"	m	struct:TASK	typeref:struct:FIFO32
fifo	include/timer.h	/^    struct FIFO32 *fifo;$/;"	m	struct:TIMER	typeref:struct:FIFO32 *
fifo32_get	fifo.c	/^int fifo32_get(struct FIFO32 *fifo) {$/;"	f	typeref:typename:int
fifo32_init	fifo.c	/^void fifo32_init(struct FIFO32 *fifo, int size, int *buf, struct TASK *task) {$/;"	f	typeref:typename:void
fifo32_put	fifo.c	/^int fifo32_put(struct FIFO32 *fifo, int data) {$/;"	f	typeref:typename:int
fifo32_status	fifo.c	/^int fifo32_status(struct FIFO32 *fifo) {$/;"	f	typeref:typename:int
file_load_file	file.c	/^void file_load_file(int clustno, int size, char *buf, int *fat, char *img){$/;"	f	typeref:typename:void
file_read_fat	file.c	/^void file_read_fat(int *fat, unsigned char *img){$/;"	f	typeref:typename:void
file_search	file.c	/^struct FILEINFO *file_search(char *name, struct FILEINFO *finfo, int max){$/;"	f	typeref:struct:FILEINFO *
fin	IPL.asm	/^fin:$/;"	l
flags	include/fifo.h	/^  int size, free, flags;$/;"	m	struct:FIFO32	typeref:typename:int
flags	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
flags	include/task.h	/^    int sel, flags;         \/\/sel存放GDT编号$/;"	m	struct:TASK	typeref:typename:int
flags	include/timer.h	/^    unsigned int flags;$/;"	m	struct:TIMER	typeref:typename:unsigned int
free	include/fifo.h	/^  int size, free, flags;$/;"	m	struct:FIFO32	typeref:typename:int
free	include/memory.h	/^  struct FreeInfo free[MEMMAN_FREES];$/;"	m	struct:MemMan	typeref:struct:FreeInfo[]
frees	include/memory.h	/^  int frees, maxfrees, lostsize, losts;$/;"	m	struct:MemMan	typeref:typename:int
fs	include/task.h	/^  int es, cs, ss, ds, fs, gs;$/;"	m	struct:TSS32	typeref:typename:int
gs	include/task.h	/^  int es, cs, ss, ds, fs, gs;$/;"	m	struct:TSS32	typeref:typename:int
hankaku	hankaku.asm	/^hankaku:$/;"	l
hankaku.bin	makefile	/^hankaku.bin: hankaku.asm$/;"	t
haribote.sys	makefile	/^haribote.sys: OS.bin kernel.sys$/;"	t
height	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
hrb_api	api.c	/^int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx,int eax){$/;"	f	typeref:typename:int *
image	makefile	/^image: IPL.bin haribote.sys $(APPS)$/;"	t
init_gdtidt	desctbl.c	/^void init_gdtidt(void) {$/;"	f	typeref:typename:void
init_keyboard	keyboard.c	/^void init_keyboard(struct FIFO32 *fifo, int data0){$/;"	f	typeref:typename:void
init_mouse_cursor8	graphic.c	/^void init_mouse_cursor8(unsigned char *mouse, char bc) {$/;"	f	typeref:typename:void
init_palette	graphic.c	/^void init_palette(void) {$/;"	f	typeref:typename:void
init_pic	int.c	/^void init_pic(void) {$/;"	f	typeref:typename:void
init_pit	timer.c	/^void init_pit(void){$/;"	f	typeref:typename:void
init_screen8	graphic.c	/^void init_screen8(unsigned char *vram, int x, int y) {$/;"	f	typeref:typename:void
io_cli	asmfunc.asm	/^io_cli:$/;"	l
io_hlt	asmfunc.asm	/^io_hlt:$/;"	l
io_in16	asmfunc.asm	/^io_in16:$/;"	l
io_in32	asmfunc.asm	/^io_in32:$/;"	l
io_in8	asmfunc.asm	/^io_in8:$/;"	l
io_load_cr0	asmfunc.asm	/^io_load_cr0:$/;"	l
io_load_eflags	asmfunc.asm	/^io_load_eflags:$/;"	l
io_out16	asmfunc.asm	/^io_out16:$/;"	l
io_out32	asmfunc.asm	/^io_out32:$/;"	l
io_out8	asmfunc.asm	/^io_out8:$/;"	l
io_sti	asmfunc.asm	/^io_sti:$/;"	l
io_stihlt	asmfunc.asm	/^io_stihlt:$/;"	l
io_store_cr0	asmfunc.asm	/^io_store_cr0:$/;"	l
io_store_eflags	asmfunc.asm	/^io_store_eflags:$/;"	l
iomap	include/task.h	/^  int ldtr, iomap;$/;"	m	struct:TSS32	typeref:typename:int
kernel.elf	makefile	/^kernel.elf: ${K_OBJS} ${L_OBJS}$/;"	t
kernel.sys	makefile	/^kernel.sys: ${K_OBJS} ${L_OBJS}$/;"	t
keybuf	keyboard.c	/^unsigned char keybuf[KEY_FIFO_BUF_SIZE];$/;"	v	typeref:typename:unsigned char[]
keydata0	keyboard.c	/^int keydata0;$/;"	v	typeref:typename:int
keyfifo	keyboard.c	/^struct FIFO32 *keyfifo;$/;"	v	typeref:struct:FIFO32 *
keystatus	OS.asm	/^keystatus:$/;"	l
keytable0	include/keyboard.h	/^static char keytable0[] = {$/;"	v	typeref:typename:char[]
keytable1	include/keyboard.h	/^static char keytable1[] = {$/;"	v	typeref:typename:char[]
ldtr	include/task.h	/^  int ldtr, iomap;$/;"	m	struct:TSS32	typeref:typename:int
leds	include/bootpack.h	/^  char  leds;$/;"	m	struct:BootInfo	typeref:typename:char
level	include/task.h	/^    int level, priority;    \/\/任务所在队列层数以及任务优先级$/;"	m	struct:TASK	typeref:typename:int
level	include/task.h	/^    struct TASKLEVEL level[MAX_TASKLEVELS];$/;"	m	struct:TASKCTL	typeref:struct:TASKLEVEL[]
limit_high	include/desctbl.h	/^  char limit_high, base_high;$/;"	m	struct:SegmentDescriptor	typeref:typename:char
limit_low	include/desctbl.h	/^  short limit_low, base_low;$/;"	m	struct:SegmentDescriptor	typeref:typename:short
load_gdtr	Stab.asm	/^load_gdtr:              ;void load_gdtr(int limit, int addr);$/;"	l
load_idtr	Stab.asm	/^load_idtr:             ;void load_idtr(int limit, int addr);$/;"	l
load_tr	asmfunc.asm	/^ load_tr:       ;void load_tr(int tr);$/;"	l
losts	include/memory.h	/^  int frees, maxfrees, lostsize, losts;$/;"	m	struct:MemMan	typeref:typename:int
lostsize	include/memory.h	/^  int frees, maxfrees, lostsize, losts;$/;"	m	struct:MemMan	typeref:typename:int
lv_change	include/task.h	/^    int lv_change;  \/\/下次任务切换时是否需要切换level$/;"	m	struct:TASKCTL	typeref:typename:int
main	app/a.c	/^int main(){$/;"	f	typeref:typename:int
main	bootpack.c	/^int main(void) {$/;"	f	typeref:typename:int
make_textbox8	window.c	/^void make_textbox8(struct Sheet *sht, int x0, int y0, int sx, int sy, int c) {$/;"	f	typeref:typename:void
make_title8	window.c	/^void make_title8(unsigned char *buf, int xsize, char *title, char act){$/;"	f	typeref:typename:void
make_window8	window.c	/^void make_window8(unsigned char *buf, int xsize, int ysize, char *title, char act) {    $/;"	f	typeref:typename:void
map	include/sheet.h	/^    unsigned char *vram, *map;$/;"	m	struct:Shtctl	typeref:typename:unsigned char *
maxfrees	include/memory.h	/^  int frees, maxfrees, lostsize, losts;$/;"	m	struct:MemMan	typeref:typename:int
memcpy	OS.asm	/^memcpy:$/;"	l
memman_alloc	memory.c	/^unsigned int memman_alloc(struct MemMan *man, unsigned int size){$/;"	f	typeref:typename:unsigned int
memman_alloc_4K	memory.c	/^unsigned int memman_alloc_4K(struct MemMan *man, unsigned int size){$/;"	f	typeref:typename:unsigned int
memman_free	memory.c	/^int memman_free(struct MemMan *man, unsigned int addr, unsigned int size){$/;"	f	typeref:typename:int
memman_free_4K	memory.c	/^int memman_free_4K(struct MemMan *man, unsigned int addr, unsigned int size) {$/;"	f	typeref:typename:int
memman_init	memory.c	/^void memman_init(struct MemMan *man) {$/;"	f	typeref:typename:void
memman_total	memory.c	/^unsigned int memman_total(struct MemMan *man){$/;"	f	typeref:typename:unsigned int
memtest	memory.c	/^unsigned int memtest(unsigned int start, unsigned int end){$/;"	f	typeref:typename:unsigned int
memtest_sub	asmfunc.asm	/^memtest_sub:$/;"	l
mouse_decode	mouse.c	/^int mouse_decode(struct MouseDec *mdec, unsigned char dat){$/;"	f	typeref:typename:int
mousebuf	mouse.c	/^unsigned char mousebuf[MOUSE_FIFO_BUF_SIZE];$/;"	v	typeref:typename:unsigned char[]
mousedata0	mouse.c	/^int mousedata0;$/;"	v	typeref:typename:int
mousefifo	mouse.c	/^struct FIFO32 *mousefifo;$/;"	v	typeref:struct:FIFO32 *
msg	IPL.asm	/^msg:$/;"	l
msg	app/hello.asm	/^msg:$/;"	l
mt_tr	task.c	/^int mt_tr;$/;"	v	typeref:typename:int
mts_fin	asmfunc.asm	/^ mts_fin:$/;"	l
mts_loop	asmfunc.asm	/^ mts_loop:$/;"	l
name	include/fileinfo.h	/^    unsigned char name[8], ext[3], type;    \/\/文件名，文件类型，文件属性$/;"	m	struct:FILEINFO	typeref:typename:unsigned char[8]
next	IPL.asm	/^next:$/;"	l
next	include/timer.h	/^    struct TIMER *next;$/;"	m	struct:TIMER	typeref:struct:TIMER *
next_r	include/fifo.h	/^  int next_r, next_w;$/;"	m	struct:FIFO32	typeref:typename:int
next_time	include/timer.h	/^    unsigned int next_time;      \/\/记录下一个超时时刻$/;"	m	struct:TIMERCTL	typeref:typename:unsigned int
next_w	include/fifo.h	/^  int next_r, next_w;$/;"	m	struct:FIFO32	typeref:typename:int
now	include/task.h	/^    int now;        \/\/记录当前正在运行的是哪个任务$/;"	m	struct:TASKLEVEL	typeref:typename:int
now_lv	include/task.h	/^    int now_lv;     \/\/现在活动中的level$/;"	m	struct:TASKCTL	typeref:typename:int
offset_high	include/desctbl.h	/^  short offset_high;$/;"	m	struct:GateDescriptor	typeref:typename:short
offset_low	include/desctbl.h	/^  short offset_low, selector;$/;"	m	struct:GateDescriptor	typeref:typename:short
phase	include/mouse.h	/^    unsigned char buf[3], phase;$/;"	m	struct:MouseDec	typeref:typename:unsigned char
pipelineflush	OS.asm	/^pipelineflush:$/;"	l
priority	include/task.h	/^    int level, priority;    \/\/任务所在队列层数以及任务优先级$/;"	m	struct:TASK	typeref:typename:int
put_block8_8	graphic.c	/^void put_block8_8(unsigned char *vram, int vxsize, int pxsize, int pysize, int px0, int py0, cha/;"	f	typeref:typename:void
put_font8	graphic.c	/^void put_font8(unsigned char *vram, int xsize, int x, int y, char c,$/;"	f	typeref:typename:void
put_font8_asc_sht	graphic.c	/^void put_font8_asc_sht(struct Sheet *sht, int x, int y, int c, int b, char *s, int len){$/;"	f	typeref:typename:void
put_fonts8_asc	graphic.c	/^void put_fonts8_asc(unsigned char *vram, int xsize, int x, int y, char c, char *s) {$/;"	f	typeref:typename:void
putloop	IPL.asm	/^putloop:$/;"	l
qemu	makefile	/^qemu: $/;"	t
readloop	IPL.asm	/^readloop:$/;"	l
reserve	include/bootpack.h	/^  char  reserve;$/;"	m	struct:BootInfo	typeref:typename:char
reserve	include/fileinfo.h	/^    char reserve[10];                       \/\/保留$/;"	m	struct:FILEINFO	typeref:typename:char[10]
retry	IPL.asm	/^retry:$/;"	l
running	include/task.h	/^    int running;    \/\/正在运行任务数$/;"	m	struct:TASKLEVEL	typeref:typename:int
scrn320	OS.asm	/^scrn320:$/;"	l
scrnx	include/bootpack.h	/^  short scrnx;$/;"	m	struct:BootInfo	typeref:typename:short
scrny	include/bootpack.h	/^  short scrny;$/;"	m	struct:BootInfo	typeref:typename:short
sel	include/task.h	/^    int sel, flags;         \/\/sel存放GDT编号$/;"	m	struct:TASK	typeref:typename:int
selector	include/desctbl.h	/^  short offset_low, selector;$/;"	m	struct:GateDescriptor	typeref:typename:short
set_gatedesc	desctbl.c	/^void set_gatedesc(struct GateDescriptor *gd, int offset, int selector, int ar) {$/;"	f	typeref:typename:void
set_palette	graphic.c	/^void set_palette(int start, int end, unsigned char *rgb) {$/;"	f	typeref:typename:void
set_segmdesc	desctbl.c	/^void set_segmdesc(struct SegmentDescriptor *sd, unsigned int limit, int base, int ar) {$/;"	f	typeref:typename:void
sheet_alloc	sheet.c	/^struct Sheet *sheet_alloc(struct Shtctl *ctl){$/;"	f	typeref:struct:Sheet *
sheet_free	sheet.c	/^void sheet_free(struct Sheet *sht){$/;"	f	typeref:typename:void
sheet_refresh	sheet.c	/^void sheet_refresh(struct Sheet *sht, int bx0, int by0, int bx1, int by1){$/;"	f	typeref:typename:void
sheet_refreshmap	sheet.c	/^void sheet_refreshmap(struct Shtctl *ctl, int vx0, int vy0, int vx1, int vy1, int h0) {$/;"	f	typeref:typename:void
sheet_refreshsub	sheet.c	/^void sheet_refreshsub(struct Shtctl *ctl, int vx0, int vy0, int vx1, int vy1, int h0, int h1) {$/;"	f	typeref:typename:void
sheet_setbuf	sheet.c	/^void sheet_setbuf(struct Sheet *sht, unsigned char *buf, int xsize, int ysize, int col_inv){$/;"	f	typeref:typename:void
sheet_slide	sheet.c	/^void sheet_slide(struct Sheet *sht, int vx0, int vy0){$/;"	f	typeref:typename:void
sheet_updown	sheet.c	/^void sheet_updown(struct Sheet *sht, int height){$/;"	f	typeref:typename:void
sheets	include/sheet.h	/^    struct Sheet *sheets[MAX_SHEETS];       \/\/用于对图层的高度进行升序排序$/;"	m	struct:Shtctl	typeref:struct:Sheet * []
sheets0	include/sheet.h	/^    struct Sheet sheets0[MAX_SHEETS];$/;"	m	struct:Shtctl	typeref:struct:Sheet[]
sht	include/console.h	/^    struct Sheet *sht;$/;"	m	struct:CONSOLE	typeref:struct:Sheet *
shtctl_init	sheet.c	/^struct Shtctl *shtctl_init(struct MemMan *man, unsigned char *vram, int xsize, int ysize){$/;"	f	typeref:struct:Shtctl *
size	include/fifo.h	/^  int size, free, flags;$/;"	m	struct:FIFO32	typeref:typename:int
size	include/fileinfo.h	/^    unsigned int size;                      \/\/文件大小$/;"	m	struct:FILEINFO	typeref:typename:unsigned int
size	include/memory.h	/^  unsigned int addr, size;$/;"	m	struct:FreeInfo	typeref:typename:unsigned int
skip	OS.asm	/^skip:$/;"	l
ss	include/task.h	/^  int es, cs, ss, ds, fs, gs;$/;"	m	struct:TSS32	typeref:typename:int
ss0	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
ss1	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
ss2	include/task.h	/^  int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;$/;"	m	struct:TSS32	typeref:typename:int
start_app	asmfunc.asm	/^start_app:      ;void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);$/;"	l
task	include/fifo.h	/^  struct TASK *task;$/;"	m	struct:FIFO32	typeref:struct:TASK *
task_add	task.c	/^void task_add(struct TASK *task){$/;"	f	typeref:typename:void
task_alloc	task.c	/^struct TASK *task_alloc(void){$/;"	f	typeref:struct:TASK *
task_idle	task.c	/^void task_idle(){$/;"	f	typeref:typename:void
task_init	task.c	/^struct TASK *task_init(struct MemMan *memman){$/;"	f	typeref:struct:TASK *
task_now	task.c	/^struct TASK *task_now(){$/;"	f	typeref:struct:TASK *
task_remove	task.c	/^void task_remove(struct TASK *task){$/;"	f	typeref:typename:void
task_run	task.c	/^void task_run(struct TASK *task, int level, int priority){$/;"	f	typeref:typename:void
task_sleep	task.c	/^void task_sleep(struct TASK *task){$/;"	f	typeref:typename:void
task_switchsub	task.c	/^void task_switchsub(){$/;"	f	typeref:typename:void
task_timer	task.c	/^struct TIMER *task_timer;$/;"	v	typeref:struct:TIMER *
taskctl	task.c	/^struct TASKCTL *taskctl;$/;"	v	typeref:struct:TASKCTL *
tasks	include/task.h	/^    struct TASK *tasks[MAX_TASKS_LV];      \/\/正在运行任务队列$/;"	m	struct:TASKLEVEL	typeref:struct:TASK * []
tasks0	include/task.h	/^    struct TASK tasks0[MAX_TASKS];$/;"	m	struct:TASKCTL	typeref:struct:TASK[]
taskswitch	task.c	/^void taskswitch(void){$/;"	f	typeref:typename:void
time	include/fileinfo.h	/^    unsigned short time, data, clustno;     \/\/clustno文件所在扇区$/;"	m	struct:FILEINFO	typeref:typename:unsigned short
timeout	include/timer.h	/^    unsigned int timeout;   \/\/用于记录距离超时还有多长时间$/;"	m	struct:TIMER	typeref:typename:unsigned int
timer	include/timer.h	/^    struct TIMER timer[MAX_TIMER], *timers;$/;"	m	struct:TIMERCTL	typeref:struct:TIMER[]
timer_alloc	timer.c	/^struct TIMER *timer_alloc(void){$/;"	f	typeref:struct:TIMER *
timer_free	timer.c	/^void timer_free(struct TIMER *timer){$/;"	f	typeref:typename:void
timer_init	timer.c	/^void timer_init(struct TIMER *timer, struct FIFO32 *fifo, unsigned char data){$/;"	f	typeref:typename:void
timer_settimer	timer.c	/^void timer_settimer(struct TIMER *timer, unsigned int timeout){$/;"	f	typeref:typename:void
timerctl	timer.c	/^struct TIMERCTL timerctl;$/;"	v	typeref:struct:TIMERCTL
timers	include/timer.h	/^    struct TIMER timer[MAX_TIMER], *timers;$/;"	m	struct:TIMERCTL	typeref:struct:TIMER *
top	include/sheet.h	/^    int xsize, ysize, top;      \/\/top 最定图层的高度$/;"	m	struct:Shtctl	typeref:typename:int
tss	include/task.h	/^    struct TSS32 tss;$/;"	m	struct:TASK	typeref:struct:TSS32
type	include/fileinfo.h	/^    unsigned char name[8], ext[3], type;    \/\/文件名，文件类型，文件属性$/;"	m	struct:FILEINFO	typeref:typename:unsigned char
using_	include/timer.h	/^    unsigned using_;        \/\/记录活动定时器的个数$/;"	m	struct:TIMERCTL	typeref:typename:unsigned
vmode	include/bootpack.h	/^  char  vmode;$/;"	m	struct:BootInfo	typeref:typename:char
vram	include/bootpack.h	/^  unsigned char *vram;$/;"	m	struct:BootInfo	typeref:typename:unsigned char *
vram	include/sheet.h	/^    unsigned char *vram, *map;$/;"	m	struct:Shtctl	typeref:typename:unsigned char *
vx0	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
vy0	include/sheet.h	/^    int bxsize, bysize, vx0, vy0, col_inv, height, flags;$/;"	m	struct:Sheet	typeref:typename:int
wait_KBC_sendready	keyboard.c	/^void wait_KBC_sendready(void){$/;"	f	typeref:typename:void
waitkbdout	OS.asm	/^waitkbdout:$/;"	l
x	include/mouse.h	/^    int x, y, btn;$/;"	m	struct:MouseDec	typeref:typename:int
xsize	include/sheet.h	/^    int xsize, ysize, top;      \/\/top 最定图层的高度$/;"	m	struct:Shtctl	typeref:typename:int
y	include/mouse.h	/^    int x, y, btn;$/;"	m	struct:MouseDec	typeref:typename:int
ysize	include/sheet.h	/^    int xsize, ysize, top;      \/\/top 最定图层的高度$/;"	m	struct:Shtctl	typeref:typename:int
