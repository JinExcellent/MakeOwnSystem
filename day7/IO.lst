     1                                  ;[FORMAT "WCOFF"]       ;该指令为Windows特有的伪指令，在linux端下需要在nasm编译时通过-f选项指定文件输出格式为elf32
     2                                  [BITS 32]
     3                                  
     4                                  ;该成勋相当于创建了一个c可调用的全局函数
     5                                  GLOBAL io_hlt               ;void io_hlt(void);
     6                                  GLOBAL io_cli, io_sti, io_stihlt
     7                                  GLOBAL io_in8, io_in16, io_in32
     8                                  GLOBAL io_out8, io_out16, io_out32
     9                                  GLOBAL io_load_eflags, io_store_eflags 
    10                                  ;GLOBAL write_mem            ;void write_mem(int addr, int data);
    11                                  
    12                                  
    13                                  [SECTION .text]         ;向进程的.text段中写入函数指令
    14                                  io_hlt:
    15 00000000 F4                          HLT
    16 00000001 C3                          RET
    17                                  
    18                                  io_cli:
    19 00000002 FA                          CLI
    20 00000003 C3                          RET
    21                                  
    22                                  io_sti:
    23 00000004 FB                          STI
    24 00000005 C3                          RET
    25                                  
    26                                  io_stihlt:
    27 00000006 FB                          STI
    28 00000007 F4                          HLT
    29 00000008 C3                          RET
    30                                  
    31                                  io_in8:
    32 00000009 8B542404                    MOV EDX,[ESP+4]
    33 0000000D B800000000                  MOV EAX,0
    34 00000012 EC                          IN AL,DX
    35 00000013 C3                          RET
    36                                  
    37                                  io_in16:
    38 00000014 8B542404                    MOV EDX,[ESP+4]
    39 00000018 B800000000                  MOV EAX,0
    40 0000001D 66ED                        IN AX,DX
    41 0000001F C3                          RET
    42                                  
    43                                  io_in32:
    44 00000020 8B542404                    MOV EDX,[ESP+4]
    45 00000024 ED                          IN EAX,DX
    46 00000025 C3                          RET
    47                                  
    48                                  io_out8:
    49 00000026 8B542404                    MOV EDX,[ESP+4]
    50 0000002A 8A442408                    MOV AL,[ESP+8]
    51 0000002E EE                          OUT DX,AL
    52 0000002F C3                          RET
    53                                  
    54                                  io_out16:
    55 00000030 8B542404                    MOV EDX,[ESP+4]
    56 00000034 668B442408                  MOV AX,[ESP+8]
    57 00000039 66EF                        OUT DX,AX
    58 0000003B C3                          RET
    59                                  
    60                                  io_out32:
    61 0000003C 8B542404                    MOV EDX,[ESP+4]
    62 00000040 8B442408                    MOV EAX,[ESP+8]
    63 00000044 EF                          OUT DX,EAX
    64 00000045 C3                          RET
    65                                  
    66                                  io_load_eflags:
    67 00000046 9C                          PUSHFD
    68 00000047 58                          POP EAX
    69 00000048 C3                          RET
    70                                  
    71                                  io_store_eflags:
    72 00000049 8B442404                    MOV EAX, [ESP+4]
    73 0000004D 50                          PUSH EAX
    74 0000004E 9D                          POPFD
    75 0000004F C3                          RET
    76                                  
    77                                  
    78                                  ;这里需要自己去查阅相关的函数栈传参细节
    79                                  ;write_mem:                  
    80                                  ;    MOV ECX,[ESP+4]
    81                                      ;MOV AL,[ESP+8]
    82                                      ;MOV [ECX],AL
    83                                      ;RET
